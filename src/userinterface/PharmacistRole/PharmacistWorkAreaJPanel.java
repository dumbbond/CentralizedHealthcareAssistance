/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PharmacistRole;

import Business.EcoSystem;
import Business.Enterprise.CentralAuthorityEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.InsuranceSystemEnterprise;
import static Business.GeneralTools.InsuranceUnderWritingRequestGen;
import Business.Insurance.InsuranceClaims;
import Business.Insurance.Insurer;
import Business.Network.Network;
import Business.Organization.CAPatientManagementOrganization;
import Business.Organization.DrugPharmacistOrganization;
import Business.Organization.InsuranceFinanceOrganization;
import Business.Organization.InsuranceUnderwriterOrganization;
import Business.Organization.Organization;
import Business.Patient.MedicalFile;
import Business.Patient.Patient;
import Business.Patient.Prescription;
import Business.UserAccount.UserAccount;
import Business.Patient.PrescriptionDetails;
import Business.WorkQueue.UnderwriterPaymentAuthorizationWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Team NullPointerException - Shubham Jain
 */
public class PharmacistWorkAreaJPanel extends javax.swing.JPanel {

    public JPanel userProcessContainer;
    public UserAccount userAccount;
    public EcoSystem business;
    public DrugPharmacistOrganization organization;
    public int patientId;
    public Prescription prescription;
    private Patient hiddenPatient;

    /**
     * Creates new form PharmacistWorkAreaJPanel
     */
    public PharmacistWorkAreaJPanel() {
        initComponents();
    }

    public PharmacistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.organization = (DrugPharmacistOrganization) organization;
//        falsepopulateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblActivePrescription = new javax.swing.JTable();
        btnRetrievePrescription = new javax.swing.JButton();
        btnGenerateBill = new javax.swing.JButton();
        txtPatientId = new javax.swing.JTextField();
        lblInsAmt = new javax.swing.JLabel();
        lblGenerateBill = new javax.swing.JLabel();
        lblInfo2 = new javax.swing.JLabel();
        btnViewMedicines = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMedicineTable = new javax.swing.JTable();
        btnPriceOfMedicine = new javax.swing.JButton();
        lblInfo1 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        lblPrescriptionId = new javax.swing.JLabel();
        btnAssignToMe = new javax.swing.JButton();
        txtPrescriptionId = new javax.swing.JTextField();
        lblPatientId = new javax.swing.JLabel();
        btnPayThroughInsurance = new javax.swing.JButton();
        txtInsAmount = new javax.swing.JTextField();
        lblPrice1 = new javax.swing.JLabel();
        lblFormTitle1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblActivePrescription.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prescription Id", "PatientId", "Date", "Doctor", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblActivePrescription);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 560, 210));

        btnRetrievePrescription.setText("Retrieve Active Prescription");
        btnRetrievePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrievePrescriptionActionPerformed(evt);
            }
        });
        add(btnRetrievePrescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 280, -1, 50));

        btnGenerateBill.setText("Generate Bill");
        btnGenerateBill.setEnabled(false);
        btnGenerateBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateBillActionPerformed(evt);
            }
        });
        add(btnGenerateBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 770, 190, -1));
        add(txtPatientId, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 80, -1));

        lblInsAmt.setText("Amount to Pay Through Insurance");
        add(lblInsAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 770, -1, -1));

        lblGenerateBill.setText("Process Drug Sell Request");
        add(lblGenerateBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 770, -1, -1));

        lblInfo2.setText("Please Select which Active Prescription you want to view");
        add(lblInfo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, -1, -1));

        btnViewMedicines.setText("View Prescribed Medicines >>");
        btnViewMedicines.setEnabled(false);
        btnViewMedicines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMedicinesActionPerformed(evt);
            }
        });
        add(btnViewMedicines, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 470, 210, 50));

        tblMedicineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name of Medicine", "Doses", "Frequencies", "Number of Days", "Condition", "Price", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMedicineTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 390, 670, 220));

        btnPriceOfMedicine.setText("Set Price");
        btnPriceOfMedicine.setEnabled(false);
        btnPriceOfMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceOfMedicineActionPerformed(evt);
            }
        });
        add(btnPriceOfMedicine, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 640, 150, -1));

        lblInfo1.setText("Please Enter Patient Id and Government Id to Retrieve Prescription");
        add(lblInfo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));
        add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 640, 80, -1));

        lblPrescriptionId.setText("Prescription Id:");
        add(lblPrescriptionId, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, -1, -1));

        btnAssignToMe.setText("Assign to me");
        btnAssignToMe.setEnabled(false);
        btnAssignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMeActionPerformed(evt);
            }
        });
        add(btnAssignToMe, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 620, 150, 50));
        add(txtPrescriptionId, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 310, 80, -1));

        lblPatientId.setText("Patient Id:");
        add(lblPatientId, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, -1, -1));

        btnPayThroughInsurance.setText("Pay Through Insurance");
        btnPayThroughInsurance.setEnabled(false);
        btnPayThroughInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayThroughInsuranceActionPerformed(evt);
            }
        });
        add(btnPayThroughInsurance, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 770, 190, -1));

        txtInsAmount.setToolTipText("Enter Amount you want to pay from Insurance");
        txtInsAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInsAmountActionPerformed(evt);
            }
        });
        add(txtInsAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 770, 150, -1));

        lblPrice1.setText("Medicine Price");
        add(lblPrice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 650, -1, -1));

        lblFormTitle1.setFont(new java.awt.Font("Calibri", 3, 36)); // NOI18N
        lblFormTitle1.setText("Pharmacy Home Page");
        add(lblFormTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, -1, -1));
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 20, -1, -1));
        add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 710, 1500, 10));
        add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 1500, 10));
        add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 1500, 10));

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setText("» Medicines Prescribed");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 170, -1, -1));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setText("» View Prescriptions");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnRetrievePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrievePrescriptionActionPerformed

        try {
            for (Network city : business.getNetworkList()) {
                for (Enterprise ep : city.getEnterpriseDirectory().getEnterpriseList()) {
                    if (ep instanceof CentralAuthorityEnterprise) {
                        for (Organization org : ep.getOrganizationDirectory().getOrganizationList()) {
                            if (org.getName().equals(Organization.Type.PatientManagement.getValue())) {
                                CAPatientManagementOrganization pmo = (CAPatientManagementOrganization) org;
                                for (Patient pat : pmo.getPatientDirectory().getPatientList()) {
                                    if (String.valueOf(pat.getPatientId()).equals(txtPatientId.getText())) {

                                        hiddenPatient = pat;

                                        for (MedicalFile file : pat.getMedicalFile()) {
                                            for (Prescription presc : file.getPrescription()) {
                                                if (String.valueOf(presc.getPrescriptionId()).equals(txtPrescriptionId.getText()) && presc.isStatus() == false) {

                                                    prescription = presc;
                                                    populateActivePrescription();
                                                    btnViewMedicines.setEnabled(true);
                                                    txtPatientId.setText("");
                                                    txtPrescriptionId.setText("");
                                                    btnAssignToMe.setEnabled(true);
                                                    return; //edited
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter correct value for Patient Id! Request failed due to error: " + e);
            return;
        }


    }//GEN-LAST:event_btnRetrievePrescriptionActionPerformed

    private void btnGenerateBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateBillActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblActivePrescription.getModel();
        int selectedRow = tblActivePrescription.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select Medicine to set price.");
            return;
        }

        double claimAmount = 0;
        if (!(txtInsAmount.getText().isEmpty() || txtInsAmount.getText() == null)) {
            claimAmount = Double.parseDouble(txtInsAmount.getText());
        }
        double totalPrice = calculateInvoicing();
        patientId = Integer.parseInt(String.valueOf(tblActivePrescription.getValueAt(selectedRow, 1)));
        ArrayList<String> medicines = new ArrayList<>();
        int value = tblMedicineTable.getRowCount();
        for (int i = 0; i < value; i++) {
            if (!tblMedicineTable.getValueAt(i, 5).equals(0)) {
                medicines.add(String.valueOf(tblMedicineTable.getValueAt(i, 0)));
            }
        }

        if (totalPrice > 0) {
            BillPrescribedMedicineJPanel billPrescribedMedicineJPanel = new BillPrescribedMedicineJPanel(userProcessContainer, organization, business, totalPrice, claimAmount, patientId, medicines);
            userProcessContainer.add("billPrescribedMedicineJPanel", billPrescribedMedicineJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            model.setRowCount(0);
            DefaultTableModel model1 = (DefaultTableModel) tblMedicineTable.getModel();

            model1.setRowCount(0);
            prescription.setStatus(true);
        } else {
            btnGenerateBill.setEnabled(false);
        }
    }//GEN-LAST:event_btnGenerateBillActionPerformed

    private void btnViewMedicinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMedicinesActionPerformed
        int selectedRow = tblActivePrescription.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a prescriotion to view medicines.");
            return;
        }
        Prescription presc = (Prescription) tblActivePrescription.getValueAt(selectedRow, 0);
        populateMedicineTable(presc);

    }//GEN-LAST:event_btnViewMedicinesActionPerformed

    private void btnPriceOfMedicineActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model = (DefaultTableModel) tblMedicineTable.getModel();
        int selectedRow = tblMedicineTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select Medicine to set price.");
            return;
        }
        try {
            model.setValueAt(Double.parseDouble(txtPrice.getText()), selectedRow, 5);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter a numeric value to price");
            return;
        }
        txtPrice.setText("");
        txtInsAmount.setText(String.valueOf( calculateInvoicing()));
        btnGenerateBill.setEnabled(true);
        btnPayThroughInsurance.setEnabled(true);
    }

    private void btnAssignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMeActionPerformed
        int selectedRow = tblActivePrescription.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select Prescription to assign.");
            return;
        }
        tblActivePrescription.setValueAt(userAccount, selectedRow, 4);
        btnPriceOfMedicine.setEnabled(true);
        btnViewMedicines.setEnabled(true);

    }//GEN-LAST:event_btnAssignToMeActionPerformed

    private void txtInsAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInsAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInsAmountActionPerformed

    private void btnPayThroughInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayThroughInsuranceActionPerformed
        try{
            Double amount = Double.parseDouble(txtInsAmount.getText());
            
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Amount can only be in numbers");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblActivePrescription.getModel();
        tblActivePrescription.setRowSelectionInterval(0, 0);
        int selectedRow = tblActivePrescription.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a row of prescription to claim.");
            return;
        }
        double totalAmount = calculateInvoicing();
        if (totalAmount < 0) {
            return;
        }
        if (totalAmount < Double.parseDouble(String.valueOf(txtInsAmount.getText()))) {
            JOptionPane.showMessageDialog(null, "Claim can not be greater than bill!");
            return;
        }

 //       patientId = Integer.parseInt(String.valueOf(tblActivePrescription.getValueAt(selectedRow, 1)));
        String message = "Amount " + txtInsAmount.getText() + " is requested from Insurance Company.";
        if (InsuranceUnderWritingRequestGen(hiddenPatient, "Medical Bill", totalAmount,  userAccount,  business)){
            JOptionPane.showMessageDialog(null, "Claim submitted successfully");
        }
        else{ JOptionPane.showMessageDialog(null, "Patient dosen't seem to have insurance"); }
      
    }//GEN-LAST:event_btnPayThroughInsuranceActionPerformed

    public void populateMedicineTable(Prescription presc) {
        DefaultTableModel model = (DefaultTableModel) tblMedicineTable.getModel();

        model.setRowCount(0);

        for (PrescriptionDetails prescDetail : presc.getMedicineDetails()) {
            Object[] row = new Object[7];
            row[0] = prescDetail;
            row[1] = prescDetail.getDose();
            row[2] = prescDetail.getFrequency();
            row[3] = prescDetail.getNoOfDays();
            row[4] = prescDetail.getCondition();
            row[6] = prescDetail.getNotes();

            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToMe;
    private javax.swing.JButton btnGenerateBill;
    private javax.swing.JButton btnPayThroughInsurance;
    private javax.swing.JButton btnPriceOfMedicine;
    private javax.swing.JButton btnRetrievePrescription;
    private javax.swing.JButton btnViewMedicines;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel lblFormTitle1;
    private javax.swing.JLabel lblGenerateBill;
    private javax.swing.JLabel lblInfo1;
    private javax.swing.JLabel lblInfo2;
    private javax.swing.JLabel lblInsAmt;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JLabel lblPrescriptionId;
    private javax.swing.JLabel lblPrice1;
    private javax.swing.JTable tblActivePrescription;
    private javax.swing.JTable tblMedicineTable;
    private javax.swing.JTextField txtInsAmount;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtPrescriptionId;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    private double calculateInvoicing() {
        double totalPrice = 0;
        double claimAmount = 0;
        int value = tblMedicineTable.getRowCount();
        try {
            for (int i = 0; i < value; i++) {
                if (!tblMedicineTable.getValueAt(i, 5).equals(0)) {
                    int freq = Integer.parseInt(String.valueOf(tblMedicineTable.getValueAt(i, 2)));
                    int noOfDays = Integer.parseInt(String.valueOf(tblMedicineTable.getValueAt(i, 3)));
                    double price = Double.parseDouble(String.valueOf(tblMedicineTable.getValueAt(i, 5)));
                    totalPrice += freq * noOfDays * price;
                } 
            }
            if (!(txtInsAmount.getText().isEmpty() || txtInsAmount.getText() == null)) {
                claimAmount = Double.parseDouble(txtInsAmount.getText());
            }
            if (totalPrice < claimAmount) {
                JOptionPane.showMessageDialog(null, "Insurance Amount cant be more than bill price.");
                return -1;
            }
        } catch (Exception e) {
            return 0;
        }
        return totalPrice;
    }

//    private void populateTable() {
//        DefaultTableModel model = (DefaultTableModel) tblActivePrescription.getModel();
//
//        model.setRowCount(0);
//
//        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
//            if (request instanceof PharmacistPrescriptionWorkRequest) {
//                PharmacistPrescriptionWorkRequest pharmaPrescription = ((PharmacistPrescriptionWorkRequest) request);
//                Object[] row = new Object[6];
//                row[0] = request;
//                row[1] = pharmaPrescription.getPatientId();
//                row[2] = request.getRequestDate();
//                row[3] = request.getSender().getEmployee().getName();
//                row[4] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
//                row[5] = request.getStatus();
//
//                model.addRow(row);
//            }
//        }
//    }
//    private void falsepopulateTable() {
//        DefaultTableModel model = (DefaultTableModel) tblActivePrescription.getModel();
//
//        model.setRowCount(0);
//        Prescription pre = new Prescription(new Date(), "Suresh");
//        Object[] row = new Object[6];
//        row[0] = pre;
//        row[1] = "0";
//        row[2] = pre.getDate();
//        row[3] = pre.getDoctorName();
//        row[4] = "Ramesh";
//        row[5] = "Sent";
//
//        model.addRow(row);
//        pre.addMedicine("Disprin", "1", "3", "Headache", 1, "HA");
//        pre.addMedicine("Crocin", "1", "2", "Ache", 2, "A");
//        btnViewMedicines.setEnabled(true);
//    }
    private void populateActivePrescription() {
        DefaultTableModel model = (DefaultTableModel) tblActivePrescription.getModel();
        model.setRowCount(0);
        Object[] row = new Object[6];
        row[0] = prescription;
        row[1] = hiddenPatient.getPatientId();
        row[2] = prescription.getDate();
        row[3] = prescription.getDoctorName();
        row[5] = "Pending";

        model.addRow(row);
    }
}
