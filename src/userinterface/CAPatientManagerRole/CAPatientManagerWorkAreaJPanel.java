/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CAPatientManagerRole;

import Business.EcoSystem;
import Business.Email;
import Business.Enterprise.Enterprise;
import Business.OTPVerification.OTPVerification;
import Business.Organization.CAPatientManagementOrganization;
import Business.Organization.HospitalDoctorOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CAOTPAuthorizationWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Team NullPointerException
 */
public class CAPatientManagerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CAPatientManagerAreaJPanel
     */
    
    
    private JPanel userProcessContainer;
    private CAPatientManagementOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    
    public CAPatientManagerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, CAPatientManagementOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.business = business;
        lblName.setText(userAccount.getEmployee().getName());
        loadTable();
//        OTPVerification otp = new OTPVerification();
//        CAOTPAuthorizationWorkRequest cwp = new CAOTPAuthorizationWorkRequest(CAOTPAuthorizationWorkRequest.RequestType.Initial, 1, "darshandedhia93@gmail.com");
//        otp.verifyPatientEmail(business, cwp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblGreeting = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        btnAddPatient = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientData = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnClearSearch = new javax.swing.JButton();

        lblGreeting.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        lblGreeting.setText("Welcome");

        lblName.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        lblName.setText("(Name)");

        btnAddPatient.setText("Add Patient");
        btnAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update Patient Details");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Patient");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tblPatientData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Status", "Name", "Address", "City", "State", "Zip", "Mobile No", "Date of Birth", "Email ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientData);
        if (tblPatientData.getColumnModel().getColumnCount() > 0) {
            tblPatientData.getColumnModel().getColumn(2).setResizable(false);
        }

        btnSearch.setText("Search By Patient ID");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClearSearch.setText("Clear Search");
        btnClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(lblGreeting)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(270, 270, 270)
                                .addComponent(btnAddPatient)
                                .addGap(182, 182, 182)
                                .addComponent(btnUpdate)
                                .addGap(208, 208, 208)
                                .addComponent(btnDelete)))
                        .addGap(0, 463, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(jScrollPane1))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(492, 492, 492)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClearSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGreeting, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnClearSearch))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPatient)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addGap(238, 238, 238))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientActionPerformed
        // TODO add your handling code here:
        Patient patient = new Patient();
        patient.setPatientId(business.getPatientId());
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("PatientDetailsJPanel", new PatientDetailsJPanel(true, patient, userProcessContainer, userAccount, organization, enterprise, business));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddPatientActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        if (tblPatientData.getSelectedRowCount() != 1){
            JOptionPane.showMessageDialog(null, "Kindly select one row");
        }
        else{
         
        int selectedRow= tblPatientData.getSelectedRow();
            
        Patient patient = (Patient)tblPatientData.getValueAt(selectedRow, 2);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("PatientDetailsJPanel", new PatientDetailsJPanel(false, patient, userProcessContainer, userAccount, organization, enterprise, business));
        layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         if (tblPatientData.getSelectedRowCount() != 1){
            JOptionPane.showMessageDialog(null, "Kindly select one patient to be deleted");
        }
        else{
        if (JOptionPane.showConfirmDialog(null, "Do you want to proceed with deletion of seleted patient") == JOptionPane.YES_OPTION){ 
        int selectedRow= tblPatientData.getSelectedRow();
            
        Patient patient = (Patient)tblPatientData.getValueAt(selectedRow, 2);
        organization.getPatientDirectory().getPatientList().remove(patient);
        loadTable();
        }
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
         int patientId;
        try{
             patientId = Integer.parseInt(txtSearch.getText());
            
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Patient ID can only be numbers");
            return;
        }
        
        loadTableByID(patientId);
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSearchActionPerformed
        // TODO add your handling code here:
        txtSearch.setText("");
        loadTable();
    }//GEN-LAST:event_btnClearSearchActionPerformed

    
    public void loadTableByID( int patientID){
        
        DefaultTableModel dtm = (DefaultTableModel)tblPatientData.getModel();
         dtm.setRowCount(0);
        
        for (Patient patient: organization.getPatientDirectory().getPatientList()){
            
                if (patient.getPatientId() != patientID){
                    continue;
                }
            
            Object[] row = new Object[dtm.getColumnCount()];

            row[0] = patient.getPatientId();
            row[1] = patient.getStatus();
            row[2] = patient;
            row[3] = patient.getAddress();
            row[4] = patient.getCity();
            row[5] = patient.getState();
            row[6] = patient.getZip();
            row[7] = patient.getCellNo();
            row[8] = patient.getDob();
            row[9] = patient.getEmail();
            
            dtm.addRow(row);
        }
        
      //  tblPatientData.getColumn("Photo").setCellRenderer(new LabelRenderer());
        
    }
    
      public void loadTable(){
        txtSearch.setText("");
        DefaultTableModel dtm = (DefaultTableModel)tblPatientData.getModel();
         dtm.setRowCount(0);
        
        for (Patient patient: organization.getPatientDirectory().getPatientList()){

            Object[] row = new Object[dtm.getColumnCount()];

            row[0] = patient.getPatientId();
            row[1] = patient.getStatus();
            row[2] = patient;
            row[3] = patient.getAddress();
            row[4] = patient.getCity();
            row[5] = patient.getState();
            row[6] = patient.getZip();
            row[7] = patient.getCellNo();
            row[8] = patient.getDob();
            row[9] = patient.getEmail();
            
            dtm.addRow(row);
        }
        
      //  tblPatientData.getColumn("Photo").setCellRenderer(new LabelRenderer());
        
    }

    
        class LabelRenderer implements TableCellRenderer{
        
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            TableColumn tc = table.getColumn("Photo");
            tc.setMinWidth(65);
            tc.setMaxWidth(65);
            tblPatientData.setRowHeight(65);
            return (Component)value;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPatient;
    private javax.swing.JButton btnClearSearch;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblGreeting;
    private javax.swing.JLabel lblName;
    private javax.swing.JTable tblPatientData;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
