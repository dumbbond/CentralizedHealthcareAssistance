/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ReceptionistRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.GeneralTools;
import Business.Hospital.Appointment;
import Business.Network.Network;
import Business.OTPVerification.OTPVerification;
import Business.Organization.HospitalDoctorOrganization;
import Business.Organization.HospitalReceptionOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.TestClass;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CAFetchPatientRequest;
import Business.WorkQueue.CAOTPAuthorizationWorkRequest;
import Business.WorkQueue.DoctorAppointmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rruch
 */
public class ReceptionistWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReceptionistWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private HospitalReceptionOrganization receptionOrganization;
    Enterprise enterprise;
    String pleaseSelect = "Please Select";
    int hiddenPatientId;

    public ReceptionistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.receptionOrganization = (HospitalReceptionOrganization) organization;
        this.enterprise = enterprise;

        populate();


        for (Patient pt : GeneralTools.getAllPatient(business)) {
            System.out.println("Patients -------------------------------- > " + pt.getName() + " " + pt.getPatientId());

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointments = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnCreateAppointment = new javax.swing.JButton();
        txtPatientId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPatientPin = new javax.swing.JTextField();
        comboPatient = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnRetrievePatient = new javax.swing.JButton();
        comboDoctor = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboTime = new javax.swing.JComboBox<>();
        lblCreateApptHeading = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnGenaratePin = new javax.swing.JButton();
        btnCancelAppointment = new javax.swing.JButton();
        dateChooserComboBox = new datechooser.beans.DateChooserCombo();
        btnRefreshTable = new javax.swing.JButton();
        lblOtpMessage = new javax.swing.JLabel();

        tblAppointments.setAutoCreateRowSorter(true);
        tblAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Date", "Time", "Patient", "Doctor", "Created By", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAppointments);
        if (tblAppointments.getColumnModel().getColumnCount() > 0) {
            tblAppointments.getColumnModel().getColumn(0).setResizable(false);
            tblAppointments.getColumnModel().getColumn(1).setResizable(false);
            tblAppointments.getColumnModel().getColumn(2).setResizable(false);
            tblAppointments.getColumnModel().getColumn(3).setResizable(false);
            tblAppointments.getColumnModel().getColumn(4).setResizable(false);
            tblAppointments.getColumnModel().getColumn(5).setResizable(false);
            tblAppointments.getColumnModel().getColumn(6).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Reception Counter");

        btnCreateAppointment.setText("Create Appointment");
        btnCreateAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAppointmentActionPerformed(evt);
            }
        });

        jLabel2.setText("Retrieve Patient History");

        jLabel3.setText("Patient ID : ");

        jLabel4.setText("PIN : ");

        comboPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPatientActionPerformed(evt);
            }
        });

        jLabel5.setText("Patient :");

        btnRetrievePatient.setText("Retrieve Patient");
        btnRetrievePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrievePatientActionPerformed(evt);
            }
        });

        comboDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDoctorActionPerformed(evt);
            }
        });

        jLabel6.setText("Doctor :");

        jLabel7.setText("Date :");

        jLabel8.setText("Time :");

        comboTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTimeActionPerformed(evt);
            }
        });

        lblCreateApptHeading.setText("Create Appointment for retrieved patient :");

        jLabel10.setText("Appointments :");

        btnGenaratePin.setText("Generate PIN");
        btnGenaratePin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenaratePinActionPerformed(evt);
            }
        });

        btnCancelAppointment.setText("Cancel Appointment");
        btnCancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelAppointmentActionPerformed(evt);
            }
        });

        dateChooserComboBox.setCalendarPreferredSize(new java.awt.Dimension(330, 210));

        btnRefreshTable.setText("Refresh Table");
        btnRefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableActionPerformed(evt);
            }
        });

        lblOtpMessage.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        lblOtpMessage.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(542, 542, 542)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(btnCreateAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCreateApptHeading)
                            .addComponent(btnRetrievePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPatientPin, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dateChooserComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                            .addComponent(comboPatient, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtPatientId)
                                            .addComponent(comboDoctor, 0, 151, Short.MAX_VALUE)
                                            .addComponent(comboTime, javax.swing.GroupLayout.Alignment.TRAILING, 0, 151, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addComponent(btnGenaratePin, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblOtpMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCancelAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRefreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 968, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(203, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(btnGenaratePin)
                            .addComponent(lblOtpMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtPatientPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRetrievePatient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCreateApptHeading)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateChooserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(btnCreateAppointment)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(btnRefreshTable))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnCancelAppointment)
                .addContainerGap(299, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAppointmentActionPerformed
        // TODO add your handling code here:
        if (comboPatient.getSelectedItem().equals(pleaseSelect) || comboDoctor.getSelectedItem().equals(pleaseSelect) || comboTime.getSelectedItem().equals(pleaseSelect)) {
            JOptionPane.showMessageDialog(null, "please select Patient, Doctor and time fields");
            return;
        }
        Patient patient = (Patient) comboPatient.getSelectedItem();
        UserAccount doctor = (UserAccount) comboDoctor.getSelectedItem();
        Appointment.Apttime aptTime = (Appointment.Apttime) comboTime.getSelectedItem();

        Date date = dateChooserComboBox.getSelectedDate().getTime();
        UserAccount receptionist = userAccount;

        Appointment appointment = new Appointment(date, aptTime, doctor, patient, receptionist, Appointment.AptStatus.ASSIGNED);

        DoctorAppointmentWorkRequest request = new DoctorAppointmentWorkRequest();
        request.setAppointment(appointment);
        request.setSender(userAccount);
        request.setStatus("Sent");
        request.setReceiver(doctor);

        Organization org = null;
        UserAccount doctorAccount;

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof HospitalDoctorOrganization) {

                for (UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountList()) {

                    if (userAccount == doctor) {
                        org = organization;
                    }

                }

            }
        }
        if (org != null) {
            System.out.println("Reception Org -- createAptBtn -- if(org!==null) --- Org = " + org.getName());
            if (org.getWorkQueue() == null) {
                System.out.println("org.getWorkQueue() -- " + org.getWorkQueue());
            }
            org.getWorkQueue().getWorkRequestList().add(request);
            doctor.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
            receptionOrganization.getWorkQueue().getWorkRequestList().add(request);

        }

        populateTable();

        comboDoctor.setEnabled(false);
        comboPatient.setEnabled(false);
        comboPatient.removeAll();
        comboTime.setEnabled(false);
        dateChooserComboBox.setEnabled(false);
        btnCreateAppointment.setEnabled(false);
    }//GEN-LAST:event_btnCreateAppointmentActionPerformed

    private void btnRetrievePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrievePatientActionPerformed
        // TODO add your handling code here:
        try {

            int pin = Integer.parseInt(txtPatientPin.getText());
            int ptId = Integer.parseInt(txtPatientId.getText());

            CAFetchPatientRequest fetchRequest = new CAFetchPatientRequest();
            Boolean isPatientRetrieveSuccessfull = false;
            Patient myPatient;

            fetchRequest.setSender(userAccount);
            fetchRequest.setStatus("Requested");
            fetchRequest.setMessage("rruchit001@gamail.com");

            fetchRequest.setOtp(pin);
            fetchRequest.setPatientId(ptId);

            if (OTPVerification.fetchPatient(business, fetchRequest)) {
                System.out.println("otp verification successfull by CA");
                myPatient = fetchRequest.getPatient();

                comboPatient.removeAll();
                ArrayList<Patient> patientList = new ArrayList<>();
                patientList.add(myPatient);
                comboPatient.setModel(new DefaultComboBoxModel(patientList.toArray()));
            };

            if (comboPatient.getSelectedItem() != null) {
                isPatientRetrieveSuccessfull = true;
            }

            if (isPatientRetrieveSuccessfull) {
                comboDoctor.setEnabled(true);
                comboPatient.setEnabled(true);
//        comboPatient.insertItemAt(pleaseSelect,0);
                comboTime.setEnabled(true);
                dateChooserComboBox.setEnabled(true);
                btnCreateAppointment.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid PIN!");
                return;
            }

        } catch (NumberFormatException r) {
            JOptionPane.showMessageDialog(null, "Invalid PIN!");
            return;
        } catch (Exception r) {
            JOptionPane.showMessageDialog(null, "Invalid PIN!");
            return;
        }


    }//GEN-LAST:event_btnRetrievePatientActionPerformed

    private void comboPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPatientActionPerformed

    private void comboDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDoctorActionPerformed

    private void comboTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTimeActionPerformed

    private void btnGenaratePinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenaratePinActionPerformed
        // TODO add your handling code here:

        try {

            int ptId = Integer.parseInt(txtPatientId.getText());

            CAOTPAuthorizationWorkRequest otpRequest = new CAOTPAuthorizationWorkRequest(CAOTPAuthorizationWorkRequest.RequestType.Normal, ptId);
            otpRequest.setSender(userAccount);
            otpRequest.setStatus("Requested");
            otpRequest.setMessage("rruchit001@gamail.com");

//            System.out.println("userinterface.ReceptionistRole.ReceptionistWorkAreaJPanel.btnGenaratePinActionPerformed() -- otp verify return -- ");
            if (OTPVerification.verifyPatientEmail(business, otpRequest)) {
                lblOtpMessage.setText("Request has been sent to patient's Email, kindly enter pin to retrieve.");
                btnRetrievePatient.setEnabled(true);
                txtPatientPin.setEnabled(true);
                hiddenPatientId = ptId;
                return;
            }

            lblOtpMessage.setText("Invalid Patient ID, kindly verify.");
            return;
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(null, "Patient Id cannot be String, please enter number only!");
            return;

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Invalid Patient ID, kindly verify.");
            return;

        }


    }//GEN-LAST:event_btnGenaratePinActionPerformed

    private void btnCancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelAppointmentActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:

        int selectedRow = tblAppointments.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select atleast one row.");
            return;
        }
        Appointment appointment = (Appointment) tblAppointments.getValueAt(selectedRow, 0);
        appointment.setAptStatus(Appointment.AptStatus.CANCELLED);

        Dimension size = dateChooserComboBox.getCalendarPreferredSize();
        size.width += 400;
        dateChooserComboBox.setCalendarPreferredSize(size);

        populateTable();


    }//GEN-LAST:event_btnCancelAppointmentActionPerformed

    private void btnRefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnRefreshTableActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelAppointment;
    private javax.swing.JButton btnCreateAppointment;
    private javax.swing.JButton btnGenaratePin;
    private javax.swing.JButton btnRefreshTable;
    private javax.swing.JButton btnRetrievePatient;
    private javax.swing.JComboBox<String> comboDoctor;
    private javax.swing.JComboBox<String> comboPatient;
    private javax.swing.JComboBox<String> comboTime;
    private datechooser.beans.DateChooserCombo dateChooserComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCreateApptHeading;
    private javax.swing.JLabel lblOtpMessage;
    private javax.swing.JTable tblAppointments;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtPatientPin;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblAppointments.getModel();
        dtm.setRowCount(0);

        for (WorkRequest workReq : receptionOrganization.getWorkQueue().getWorkRequestList()) {

            if (workReq instanceof DoctorAppointmentWorkRequest) {
                Appointment appointment = ((DoctorAppointmentWorkRequest) workReq).getAppointment();

                Object[] row = new Object[7];
                row[0] = appointment;
                row[1] = appointment.getAppointmentDate();
                row[2] = appointment.getAptTime();
                row[3] = appointment.getPatient();
                row[4] = appointment.getDoctor();
                row[5] = appointment.getReceptionist();
                row[6] = appointment.getAptStatus();

                System.out.println(appointment.getPatient().getName() + " ------ > " + appointment.getPatient().getPatientId());
                dtm.addRow(row);
            }

        }

    }

    private void populateComboBox() {

        ArrayList<UserAccount> docList = new ArrayList<>();

        Enterprise docEnterprise = null;
        for (Network network : business.getNetworkList()) {

            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                System.out.println(enterprise.getEnterpriseType().getValue());

                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {

                    for (UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountList()) {
                        System.out.println(userAccount.getUsername());
                        if (userAccount == this.userAccount) {
                            docEnterprise = enterprise;
                        }
                    }

                }

            }

        }

        if (docEnterprise != null) {
            System.out.println("in if, docEnterprise");
            for (Organization organization : docEnterprise.getOrganizationDirectory().getOrganizationList()) {
                for (UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountList()) {
//                 System.out.println("in 2nd for " + (userAccount.getRole().toString().split(".")));
                    if (userAccount.getRole().toString().equals("Business.Role.DoctorRole")) {
                        docList.add(userAccount);
                    }
                }
            }

        }

        comboDoctor.setModel(new DefaultComboBoxModel(docList.toArray()));

        ArrayList<Appointment.Apttime> listOfTime = new ArrayList<>();
        listOfTime.add(Appointment.Apttime.AFTERNOON);
        listOfTime.add(Appointment.Apttime.MORNING);
        listOfTime.add(Appointment.Apttime.EVENING);
        listOfTime.add(Appointment.Apttime.NIGHT);
        comboTime.setModel(new DefaultComboBoxModel(listOfTime.toArray()));

        comboDoctor.insertItemAt(pleaseSelect, 0);
        comboTime.insertItemAt(pleaseSelect, 0);

        comboDoctor.setEnabled(false);
        comboPatient.setEnabled(false);
        comboPatient.removeAll();
        comboTime.setEnabled(false);
        dateChooserComboBox.setEnabled(false);
        btnCreateAppointment.setEnabled(false);

    }

    private void populate() {

        btnRetrievePatient.setEnabled(false);
        txtPatientPin.setEnabled(false);
        populateTable();
        populateComboBox();
    }
}
