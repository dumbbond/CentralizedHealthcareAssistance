/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.UnderwriterRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.GeneralTools;
import Business.Insurance.InsuranceClaims;
import Business.Insurance.Insurer;
import Business.Network.Network;
import Business.Organization.InsuranceFinanceOrganization;
import Business.Organization.InsuranceUnderwriterOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FinanceManagerApprovalForNewInsuranceWorkRequest;
import Business.WorkQueue.FinanceManagerRetrieveWorkRequest;
import Business.WorkQueue.UnderwriterPaymentAuthorizationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Team NullPointerException
 */
public class UnderwriterWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UnderwriterWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private InsuranceUnderwriterOrganization underwriterOrganization;
    private Enterprise enterprise;
    private int patientId;

    public UnderwriterWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.userAccount = userAccount;
        this.underwriterOrganization = (InsuranceUnderwriterOrganization) organization;
        this.patientId = 0;
        this.enterprise = enterprise;
        populateUnderwriterWorkRequestTable();
        addListnerToLabTestTable();
    }

    public UnderwriterWorkAreaJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblUnderwriterWorkRequest = new javax.swing.JTable();
        btnApproveClaim = new javax.swing.JButton();
        btnRejectClaim = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        lblFormTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JToggleButton();

        tblUnderwriterWorkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "patient name", "Claim Amount", "Claim Type", "Sender", "Receiver", "Status", "Message", "Available Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblUnderwriterWorkRequest);

        btnApproveClaim.setText("Approve Claim");
        btnApproveClaim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveClaimActionPerformed(evt);
            }
        });

        btnRejectClaim.setText("Reject Claim");
        btnRejectClaim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectClaimActionPerformed(evt);
            }
        });

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        lblFormTitle.setFont(new java.awt.Font("Calibri", 3, 36)); // NOI18N
        lblFormTitle.setText("Underwriter Home Page");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setText("Â» Underwriter Claim Requests");

        btnRefresh.setText("refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(669, 669, 669)
                .addComponent(lblFormTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(247, 247, 247)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assignJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnRejectClaim, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(btnApproveClaim))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRefresh))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(600, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblFormTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(btnRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnApproveClaim, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRejectClaim, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(361, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveClaimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveClaimActionPerformed
        int selectedRow = tblUnderwriterWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        WorkRequest request = (WorkRequest) tblUnderwriterWorkRequest.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Approved");
        if (request instanceof UnderwriterPaymentAuthorizationWorkRequest) {
            patientId = Integer.parseInt(((UnderwriterPaymentAuthorizationWorkRequest) request).toString());
        }
        populateUnderwriterWorkRequestTable();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof InsuranceFinanceOrganization) {
                for (Insurer insurer : ((InsuranceFinanceOrganization) org).getInsurerDirectory().getInsurerList()) {
                    if (insurer.getInsurerId() == patientId) {
                        insurer.setInsuredAmount(insurer.getInsuredAmount() - (double) tblUnderwriterWorkRequest.getValueAt(selectedRow, 1));
                        org.getWorkQueue().getWorkRequestList().remove(request);
                    }
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, "Claim has been approved");
        populateUnderwriterWorkRequestTable();

    }//GEN-LAST:event_btnApproveClaimActionPerformed

    private void btnRejectClaimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectClaimActionPerformed
        int selectedRow = tblUnderwriterWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }
         WorkRequest request = (WorkRequest) tblUnderwriterWorkRequest.getValueAt(selectedRow, 1);
        if(request.getStatus().equalsIgnoreCase("complete") || request.getStatus().equalsIgnoreCase("rejected")){
        JOptionPane.showMessageDialog(null, "Not a valid status for rejection!");
        return;
        }

       
        request.setReceiver(userAccount);
        request.setStatus("Rejected");
        populateUnderwriterWorkRequestTable();
        JOptionPane.showMessageDialog(null, "Claim has been rejected");
    }//GEN-LAST:event_btnRejectClaimActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = tblUnderwriterWorkRequest.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }
        
        WorkRequest request = (WorkRequest) tblUnderwriterWorkRequest.getValueAt(selectedRow, 1);
        if(request.getStatus().equalsIgnoreCase("complete") || request.getStatus().equalsIgnoreCase("rejected")){
        JOptionPane.showMessageDialog(null, "Not a valid status for assigning!");
        return;
        }

        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateUnderwriterWorkRequestTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateUnderwriterWorkRequestTable();
    }//GEN-LAST:event_btnRefreshActionPerformed
//
//    public void populateInsuranceDetailsTable(Insurer insuredPatient) {
//        DefaultTableModel model = (DefaultTableModel) tblInsurerDetails.getModel();
//        model.setRowCount(0);
////        for (Insurer ins : underwriterOrganization.getInsurerDirectory().getInsurerList()) {
////            Object[] row = new Object[6];
////            row[0] = ins;
////            row[1] = ins.getDateOfInsurance();
////            row[2] = ins.getDateOfExpiration();
////            row[3] = ins.getName();
////            row[4] = ins.getInsuredAmount();
////            row[5] = ins.getPremiumPerMonth();
////
////            model.addRow(row);
////        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnApproveClaim;
    private javax.swing.JToggleButton btnRefresh;
    private javax.swing.JButton btnRejectClaim;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFormTitle;
    private javax.swing.JTable tblUnderwriterWorkRequest;
    // End of variables declaration//GEN-END:variables

    private void populateUnderwriterWorkRequestTable() {
        DefaultTableModel model = (DefaultTableModel) tblUnderwriterWorkRequest.getModel();

        model.setRowCount(0);

        for (WorkRequest request : underwriterOrganization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof UnderwriterPaymentAuthorizationWorkRequest) {
               UnderwriterPaymentAuthorizationWorkRequest myRequest =  (UnderwriterPaymentAuthorizationWorkRequest) request;
//                if (!(myRequest.getStatus().equalsIgnoreCase("Rejected"))) {
                if (true) {
                   // InsuranceClaims claims = ((UnderwriterPaymentAuthorizationWorkRequest) request).getClaims();
                    Object[] row = new Object[9];
                    row[0] = myRequest.getPatient();
                    row[1] = myRequest;
                    row[2] = myRequest.getAmount();
                    row[3] = myRequest.getClaimType();
                    row[4] = myRequest.getSender();
                    row[5] = myRequest.getReceiver();
                    row[6] = myRequest.getStatus();
                    row[7] = myRequest.getMessage();
                    row[8] = GeneralTools.searchForInsurer(myRequest.getPatient(), GeneralTools.searchForInsuranceCompany(myRequest.getPatient(), business));

                    model.addRow(row);
                }
            }
        }
    }
    
    
    
    
    
        public void addListnerToLabTestTable() {

        tblUnderwriterWorkRequest.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (tblUnderwriterWorkRequest.getSelectedRow() > -1) {
                    int selectedRow = tblUnderwriterWorkRequest.getSelectedRow();
                    UnderwriterPaymentAuthorizationWorkRequest req = (UnderwriterPaymentAuthorizationWorkRequest)  tblUnderwriterWorkRequest.getValueAt(selectedRow, 1);
                        
//                    if(req.getStatus().equalsIgnoreCase("approved") || req.getStatus().equalsIgnoreCase("Rejected")){
//                    
//                    btnRejectClaim.setEnabled(false);
//                    
//                    }

                }
            }

        });

    }

}
